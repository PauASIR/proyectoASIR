- hosts: server
  become: yes

  vars_files:
    - ./vars/vars.yaml

  tasks:

    - name: Update apt packages 
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 86400 #One day
        
    - name: Install packages
      apt: 
        name:
        - ca-certificates
        - curl
        - jq
        - tar
        - gnupg
        - gnupg2
        - lsb-release
        - apt-transport-https
        - software-properties-common
        - acl
        - python3
        - python3-pip

    - name: Create the directory keyrings if it does not exist
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
        
    - name: Check if docker gpg has already exist
      stat:
        path: "/etc/apt/keyrings/docker.gpg"
      register: docker_gpg

    - name: GPG key / APT repository from docker
      shell: 
        cmd: |
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
          $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt update
      when: not docker_gpg.stat.exists

    - name: Install docker
      apt: 
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin

    - name: Download cri-docker
      get_url:
        url: https://github.com/Mirantis/cri-dockerd/releases/download/v0.2.1/cri-dockerd_0.2.1.3-0.ubuntu-jammy_amd64.deb
        dest: /tmp/cri-dockerd.deb
        mode: '0440'

    - name: Check if cri-docker.socket service is running
      stat:
        path: "/run/cri-dockerd.sock"
      register: cri_docker

    - name: cri-docker
      shell: 
        cmd: |
          dpkg -i /tmp/cri-dockerd.deb
      when: not cri_docker.stat.exists

    - name: Check if k8s gpg has already exist
      stat:
        path: "/usr/share/keyrings/kubernetes-archive-keyring.gpg"
      register: k8s_gpg

    - name: GPG key / APT repository from kubernetes
      shell: 
        cmd: |
          curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg    
          echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
          apt update
      when: not k8s_gpg.stat.exists

    - name: Install kubernetes
      apt: 
        name:
        - kubelet=1.24.1-00
        - kubeadm=1.24.1-00
        - kubectl=1.24.1-00

    - name: Mark hold k8s
      shell: 
        cmd: |
          apt-mark hold kubelet kubeadm kubectl

    - name: Check if kubeadm has already run
      stat:
        path: "/etc/kubernetes/pki/ca.key"
      register: kubeadm_ca_master

    - name: Init Kubeadm
      shell: 
        cmd: |
            kubeadm init --pod-network-cidr=192.168.0.0/16 --cri-socket /run/cri-dockerd.sock --skip-token-print --node-name {{ node_name }}
      when: not kubeadm_ca_master.stat.exists

    - name: Add k8s group
      ansible.builtin.group:
        name: '{{ k8s_user }}'
        state: present

    - name: Add the k8s user
      ansible.builtin.user:
        name: '{{ k8s_user }}'
        shell: /bin/bash
        groups: '{{ k8s_user }}'
        append: yes

    - name: Create the directory kube if it does not exist
      ansible.builtin.file:
        path: /home/{{ k8s_user }}/.kube
        state: directory
        mode: '0755'

    - name: Setting k8s user
      shell: 
        cmd: |
          yes | cp -i /etc/kubernetes/admin.conf /home/{{ k8s_user }}/.kube/config
          chown {{ k8s_user }}:{{ k8s_user }} /home/{{ k8s_user }}/.kube/config

    - name: Set acl rx to k8s user in tmp folder
      shell: 
        cmd: |
          setfacl -m u:{{ k8s_user }}:rx /tmp/

    - name: Install kubernetes pip3
      shell: 
        cmd: |
          pip3 install kubernetes